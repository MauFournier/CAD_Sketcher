{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-official-documentation-of-cad-sketcher","title":"Welcome to the official documentation of CAD Sketcher","text":""},{"location":"#what-is-cad-sketcher","title":"What is CAD Sketcher?","text":"<p>CAD Sketcher is a constraint-based sketcher addon for Blender that allows to create precise 2d shapes by defining a set of geometric constraints like tangent, distance, angle, equal and more. Sketches stay editable and support a fully non-destructive workflow.</p>"},{"location":"#overview","title":"Overview","text":"<p>CAD Sketcher integrates the solver of Solvespace and closely follows its design. Therefore the Solvespace Documentation is generally also relevant.</p> <p>In order to have a parametric representation of a geometric system where curves are independent of resolution, BGS introduces a set of Entities.</p> <p>Those Entities can be both in 2d and 3d. BGS isn't strictly limited to but mainly focuses on 2d entities. In order to group a set of 2d entities we use Sketches.</p> <p>The final position and dimensions of a drawn shape is defined by Constraints.</p> <p>In order to have entities follow the defined constraints, a Solver is needed.</p> <p>To further process the resulting geometry BGS uses Converters to get native Blender geometry types which then allow further modifications with native tools.</p>"},{"location":"#links","title":"Links","text":"<ul> <li>Releases - Get the addon</li> <li>Bug Report - Report a bug</li> <li>Github Issues - Suggest features and follow the development</li> <li>Discord - A place for discussions</li> <li>Contribute - Looking to help out in some way?</li> </ul>"},{"location":"advanced/","title":"Advanced","text":""},{"location":"advanced/#report-a-bug","title":"Report a Bug","text":"<p>Whenever encountering a bug follow these steps:</p> <ul> <li>Check if the bug is already reported on github</li> <li>Try to reliably reproduce the bug and simplify the steps to reproduce</li> <li>Collect the addon logs</li> <li>In case of a crash also collect blender's crash report</li> <li>Post the bug on github</li> </ul>"},{"location":"advanced/#console-output","title":"Console Output","text":"<p>Blender doesn't print system output in its info editor but only in the system terminal. Follow the guide below to access blender's system console.</p> Linux / MacWindows <p>To see the system output blender has to be started from the terminal</p> <ul> <li>Open a console by pressing Ctrl+Alt+T</li> <li>Enter \"blender\" or the path to a specific blender version</li> </ul> <ul> <li>In blender click Window-&gt;Toggle System Console</li> </ul>"},{"location":"advanced/#console-output-vscode-dependency","title":"Console Output VScode dependency","text":"<p>CAD sketcher for debugging purposes depends on the library debugpy when debugging is done through VSCode. Installing this library with <code>$pip install</code>  will further mean that the window in VSCode will need to be reloaded using  <code>command Palette &gt; Reload window</code> .</p>"},{"location":"advanced/#access-logs","title":"Access Logs","text":"<p>Logs are helpful for debugging. Note that there are logs from the addon as well as from blender itself.</p>"},{"location":"advanced/#addon-logs","title":"Addon Logs","text":"<p>The addon logs information to the system console and to the system's temporary folder. The filepath to this folder will be printed to the console whenever the addon gets registered.</p> <p>CAD_Sketcher:{INFO}: Logging into: C:\\Users\\USERNAME\\AppData\\Local\\Temp\\CAD_Sketcher.log</p>"},{"location":"advanced/#blender-crash-log","title":"Blender Crash Log","text":"<p>When blender crashes it writes a crash report file, see: crash report.</p>"},{"location":"advanced/#contribute","title":"Contribute","text":"<p>Help is always welcome. There are multiple ways to support the project.</p>"},{"location":"advanced/#testing","title":"Testing","text":"<p>Just grab the latest version, play around, provide feedback and redo!</p>"},{"location":"advanced/#documentation","title":"Documentation","text":"<p>Documentation is generated from the source repository with MkDocs. In order to contribute either post a pull request with your changes on github or ask on discord for commit access.</p> <p>Note: There are github workflows which will automatically test and build the documentation after changes are made. </p>"},{"location":"advanced/#development","title":"Development","text":"<p>If you'd like to help with development simply submit pull requests or reach out on discord, or github.</p> <p>Take a look at the existing code documentation, this isn't complete yet, if you are missing some specific information feel free to ask in the discord's contribute channel.</p> <p>Have a look at the open issues on github. Some of them are marked with the good first issue tag. Also take a look at the roadmap to see where the priority currently lies.</p> <p>Code Style</p> <p>The project uses the Black Formatter, make sure to enable it in your code editor before pushing pull requests. </p>"},{"location":"code_docs/","title":"Code Documentation","text":""},{"location":"code_docs/#core","title":"Core","text":"<p>At the base of the addon there's the properties structure. The model subpackage defines a set of blender PropertyGroups. This is needed so that values are stored to disk on file save. These PropertyGroups have to be registered and then be pointed to from somewhere by a PointerProperty.</p> <p>Additionally to pure properties PropertyGroups can also hold methods and attributes, the addon makes heavy use of that as it leads to a convenient way of working with the data.</p> <p>The root of the addon's data structure is SketcherProps which is registered on blender's Scene type and can therefore be accessed as follows: <pre><code>bpy.context.scene.sketcher\n</code></pre></p> <p>From there the structure looks as follows:</p> <p>sketcher   - entities     - points3D (CollectionProperty of 3D Points)     - lines3D (CollectionProperty of 3D Lines)     - sketches     - ...</p> <ul> <li>constraints<ul> <li>coincident (CollectionProperty of coincident constraints)</li> <li>equal</li> <li>...</li> </ul> </li> </ul> <p>Note: The nesting of PropertyGroups is done by defining PointerProperties inside of a PropertyGroup.</p>"},{"location":"code_docs/#entities","title":"Entities","text":"<p>Entities always inherit from the SlvsGenericEntity class which implements the basic properties (like properties to store if an entity is visible, construction, origin etc.) and logic (like the draw method which draws itself based on its geometry batch) entities have.</p>"},{"location":"code_docs/#index-system","title":"Index system","text":"<p>As an entity can depend on other entities there has to be a way to point to an entity. This is done by storing an unique index on each entity (entity.slvs_index) which is set when an entity is created through its \"add_*\" method on the SlvsEntities class.</p> <p>Pointing to an entity is done by storing the entity's index in a IntProperty, the entity itself can then be looked up by: <pre><code>entity = bpy.context.scene.sketcher.entities.get(index)\n</code></pre></p> <p>For convenience there's the slvs_entity_pointer function which registers the IntProperty with a \"_i\" prefix and adds getter/setter methods to directly get the entity without having to deal with the index itself.</p>"},{"location":"code_docs/#drawing","title":"Drawing","text":"<p>Entities are drawn in the viewport by utilizing blenders GPU Module. Every entity type has an update function which is responsible for creating the geometry batch that is used for drawing. As this can be expensive to compute the batches are stored based on the entity's index in global_data.batches. There's an initial tagging system in place to tag entities as dirty however this is currently still disabled by default.</p> <p>NOTE: In order to draw anything a draw handler has to be registered on the viewport type. This usually happens from an operator that the user invokes. As this is rather bad UX the addon registers the handler when the addon is registered. More precisely, as the the context at register time is limited, a Application Timer is used to register the draw handler shortly after the addon has been registered.</p>"},{"location":"code_docs/#selection","title":"Selection","text":"<p>Entity selection is done by simply drawing entities a second time in an Offscreen Texture. The color however is used to identify the entity. The two functions index_to_rgb() and rgb_to_index() inside functions.py are used to convert between the entity's \"slvs_index\" and the color value that is written to the texture.</p> <p>This concept is explained here.</p> <p>NOTE: There's the \"Write Selection Texture\" operator in the debug panel which can be used to write the current selection texture to an image data-block in order to inspect it.</p>"},{"location":"code_docs/#preselection","title":"Preselection","text":"<p>The addon makes great use of preselection highlighting. To achieve that the VIEW3D_GT_slvs_preselection gizmo is used which looks up the currently hovered pixel and writes the index to global_data.hover whenever the \"test_select\" method is called.</p> <p>NOTE: The test_select method of gizmos is used as it receives the cursor location and is called whenever the cursor moves.</p>"},{"location":"code_docs/#constraints","title":"Constraints","text":"<p>Constraints always inherit from the GenericConstraint class which implements the basic properties (like properties to store if a constraint is visible or has failed to solve etc.) and some basic logic that constraints have.</p> <p>Unlike entities the constraints are not implemented completely from scratch but rather make use of the Gizmo API to display themselves and handle other interactions like selection.</p>"},{"location":"code_docs/#interaction","title":"Interaction","text":"<p>There's a set of operators defined in operators.py which are used to create the interaction between the user and the addon. Note that the addon also has to define operators for basic interactions like selection or calling the context menu due to the fact that entities are implemented from scratch.</p> <p>Most of the viewport operators inherit from the StatefulOperator class which is a framework to allow defining complex tools in a declarative fashion. Besides the base class itself which implements logic for native blender types there's also the GenericEntityOp which adds support for addon specific types. Have a look at the interaction chapter in the docs.</p> <p>The addon also makes heavy use of workspacetools. Note that they depend on some functionality defined in the StatefulOperator class to display the correct description and get the tools shortcuts.</p> <p>NOTE: Tools that need to be able to select entities have to use the preselection gizmo in order to get updated selection.</p>"},{"location":"code_docs/#solver","title":"Solver","text":"<p>The addon uses the Python Binding of Solvespace. As the solver module isn't well documented it's best to inspect it through the an interactive python interpreter. This can be done inside blender's python console when the solver module has been installed, something like this: <pre><code>from py_slvs import slvs\nsys = slvs.System()\n</code></pre></p> <p>On the system object you'll find all the methods to add entities and constraints. You can use the inspect module to get more info like the signature of a function: <pre><code>import inspect\ninspect.signature(sys.addEqual)\n</code></pre></p> <p>The solver data isn't persistent, so whenever the solver is triggered it will create a new \"py_slvs.slvs.System\" object.Then the solver will go through the relevant entities and call their create_slvs_data method and pass the system object to it. Same applies to the constraints.</p> <p>The create_slvs_data has to return the solver handles of the elements it adds to the solver. This is later used to check which constraints have failed to solve.</p> <p>When the solver was successful it will again go through all the entities and call their update_from_slvs methods to update the blender data from the solver system.</p>"},{"location":"code_docs/#converter","title":"Converter","text":"<p>Currently there is only one native converter implemented, namely the BezierConverter defined in converters.py. When converting to mesh the target bezier object is simply converted again with blenders to_mesh function. This is a design choice to workaround the problem of finding the area to fill for a given shape.</p> <p>As a bezier spline is defined by a list of bezier control-points entities we have to create a list of connected entities. This is done by the BezierConverter.walker() method. After that we cam simply loop through these connected entities and call their to_bezier() method.</p>"},{"location":"code_docs/#faq","title":"FAQ","text":""},{"location":"code_docs/#what-happens-when-a-button-is-pressed","title":"What happens when a button is pressed?","text":"<p>In blender every user interaction happens through an operator. You can enable python tooltips to find the corresponding operator from a button. Check blenders API Docs for more information.</p>"},{"location":"code_docs/#gotchas","title":"Gotcha's","text":""},{"location":"code_docs/#entity-pointers-loose-their-assigned-values","title":"Entity pointers loose their assigned values","text":"<p>AttributeError: 'NoneType' object has no attribute \"slvs_index\"</p> <p>As described here data might not directly update after edit. This usually isn't a problem for interactive operators however it can be the case with operators, scripts or tests which add multiple entities/constraints at once. This can be solved by calling context.view_layer.update() before adding an element that depends on an element that was just created. Just be aware that this might have a negative performance impact. A better approach is to use the \"index_reference\" mode of the entity \"add_\" methods. If set to True the method will return the index of the entity rather than the object itself. All \"add_\" methods will allow passing entities by index, additionally they also accept passing parameters.</p> <pre><code>entities = context.scene.sketcher.entities\n\np1 = entities.add_point_3d((0, 0, 0), index_reference=True)\np2 = entities.add_point_3d((1, 1, 0), index_reference=True)\nline = entities.add_line_3d(p1, p2, construction=True, index_reference=True)\n\nassert type(p1) == int\n</code></pre>"},{"location":"code_docs/#properties-update-callbacks","title":"Propertie's update callbacks","text":"<p>Some properties of entities or constraints have an update callback assigned which will be triggered whenever the property is changed, it's mainly used to trigger the solver or update the view. Example of this are the point entity's location property or the value property of dimensional constraints which will both trigger the solver when the property is changed. This behaiviour is not always welcome. When writing a tool it's almost always better to avoid triggering these callbacks and manually solving the system, updating the view etc.</p> <p>To avoid it, either set all properties in the \"add_*\" methods or change the value of properties like so:</p> <p>entity[\"some_prop\"] = value</p>"},{"location":"constraints/","title":"Constraints","text":"<p>Constraints are used to restrict the movement of entities and define their final locations. A constraint can usually be created between different entity types, check the corresponding operator's tooltip to find out what's supported.</p>"},{"location":"constraints/#active","title":"Active","text":"<p>A constraint is considered to be active when the sketch it belongs to is set as the active sketch or, for constraints that don't belong to a sketch, when no sketch is active.</p>"},{"location":"constraints/#failure","title":"Failure","text":"<p>Whenever the solver fails to find a solution for the given system it will try to mark constraints that are causing the failure. Those constraints will be colored red, additionally the failed sketch will be marked.</p>"},{"location":"constraints/#types","title":"Types","text":"<p>Constraint types follow the implementation of solvespace.</p>"},{"location":"constraints/#geometric-constraints","title":"Geometric Constraints","text":"<p>Note: It\u2019s good to use horizontal and vertical constraints whenever possible. These constraints are very simple to solve, and will not lead to convergence problems. Whenever possible, define the workplanes so that lines are horizontal and vertical within those workplanes.</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsCoincident","title":"<code>SlvsCoincident</code>","text":"<p>Forces two points to be coincident, or a point to lie on a curve, or a point to lie on a plane.</p> <p>The point-coincident constraint is available in both 3d and projected versions. The 3d point-coincident constraint restricts three degrees of freedom; the projected version restricts only two. If two points are drawn in a workplane, and then constrained coincident in 3d, then an error will result\u2013they are already coincident in one dimension (the dimension normal to the plane), so the third constraint equation is redundant.</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsVertical","title":"<code>SlvsVertical</code>","text":"<p>Forces a line segment to be vertical. It applies in 2D Space only because the meaning of horizontal or vertical is defined by the workplane.</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsHorizontal","title":"<code>SlvsHorizontal</code>","text":"<p>Forces a line segment to be horizontal. It applies in 2D Space only because the meaning of horizontal or vertical is defined by the workplane.</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsParallel","title":"<code>SlvsParallel</code>","text":"<p>Forces two lines to be parallel. Applies only in 2D.</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsPerpendicular","title":"<code>SlvsPerpendicular</code>","text":"<p>Forces two lines to be perpendicular, applies only in 2D. This constraint is equivalent to an angle constraint for ninety degrees.</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsEqual","title":"<code>SlvsEqual</code>","text":"<p>Forces two lengths, or radiuses to be equal.</p> <p>If a line and an arc of a circle are selected, then the length of the line is forced equal to the length (not the radius) of the arc.</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsTangent","title":"<code>SlvsTangent</code>","text":"<p>Forces two curves (arc/circle) or a curve and a line to be tangent.</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsMidpoint","title":"<code>SlvsMidpoint</code>","text":"<p>Forces a point to lie on the midpoint of a line.</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsRatio","title":"<code>SlvsRatio</code>","text":"<p>Defines the ratio between the lengths of two line segments.</p> <p>The order matters; the ratio is defined as length of entity1 : length of entity2.</p>"},{"location":"constraints/#dimensional-constraints","title":"Dimensional Constraints","text":""},{"location":"constraints/#CAD_Sketcher.model.types.SlvsDistance","title":"<code>SlvsDistance</code>","text":"<p>Sets the distance between a point and some other entity (point/line/Workplane).</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsDiameter","title":"<code>SlvsDiameter</code>","text":"<p>Sets the diameter of an arc or a circle.</p>"},{"location":"constraints/#CAD_Sketcher.model.types.SlvsAngle","title":"<code>SlvsAngle</code>","text":"<p>Sets the angle between two lines, applies in 2D only.</p> <p>The constraint's setting can be used to to constrain the supplementary angle.</p>"},{"location":"entities/","title":"Entities","text":"<p>Entities are the basic elements which are used to draw geometry in BGS. They differ from regular blender mesh or curve elements which means native blender tools aren't able to interact with it as long as they aren't converted. See the chapter integration for further details on how to process addon specific geometry.</p> <p>Entities are defined by a set of parameters and pointers to other entities which are editable at any point in time. This allows non-destructive workflows and also ensures that geometry is resolution independent. A curve will always follow a given radius no matter how it's transformed. Entities can be created with the various Workspacetools.</p>"},{"location":"entities/#active","title":"Active","text":"<p>An entity is considered to be active when the sketch it belongs to is set as the active sketch or, for 3D entities, when no sketch is active.</p>"},{"location":"entities/#visibility","title":"Visibility","text":"<p>Entities can be hidden. Access the setting from the entity's context menu or from the entity browser.</p>"},{"location":"entities/#construction","title":"Construction","text":"<p>Entities have a construction parameter which can be set via the entity's context menu. If it's set to true the entity will be ignored when converting the geometry however it's still used to solve the geometric system. It's generally good practice to mark entities as construction if they're not part of the final geometry.</p>"},{"location":"entities/#fixed","title":"Fixed","text":"<p>Entities can be fixed via the entity's context menu. A fixed entity won't have any degrees of freedom and therefor cannot be adjusted by the solver. It's good practice to base geometry on a fixed origin point.</p> <p>Warning: While this currently applies to all entities it's intended to be used with points only.</p>"},{"location":"entities/#types","title":"Types","text":"<p>There are different types of entities, some of them apply in 2 dimensional space which requires a sketch as a parameter.</p> <p>Entity types follow the implementation of solvespace.</p> <p>Only 2D entities can be converted later, check the chapter integration for details.</p>"},{"location":"entities/#CAD_Sketcher.model.types.SlvsPoint3D","title":"<code>SlvsPoint3D</code>","text":"<p>Representation of a point in 3D Space.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>FloatVectorProperty</code> <p>Point's location in the form (x, y, z)</p> required"},{"location":"entities/#CAD_Sketcher.model.types.SlvsLine3D","title":"<code>SlvsLine3D</code>","text":"<p>Representation of a line in 3D Space.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>SlvsPoint3D</code> <p>Line's startpoint</p> required <code>p2</code> <code>SlvsPoint3D</code> <p>Line's endpoint</p> required"},{"location":"entities/#CAD_Sketcher.model.types.SlvsNormal3D","title":"<code>SlvsNormal3D</code>","text":"<p>Representation of a normal in 3D Space which is used to store a direction.</p> <p>This entity isn't currently exposed to the user and gets created implicitly when needed.</p> <p>Parameters:</p> Name Type Description Default <code>orientation</code> <code>Quaternion</code> <p>A quaternion which describes the rotation</p> required"},{"location":"entities/#CAD_Sketcher.model.types.SlvsWorkplane","title":"<code>SlvsWorkplane</code>","text":"<p>Representation of a plane which is defined by an origin point and a normal. Workplanes are used to define the position of 2D entities which only store the coordinates on the plane.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>SlvsPoint3D</code> <p>Origin Point of the Plane</p> required <code>nm</code> <code>SlvsNormal3D</code> <p>Normal which defines the orientation</p> required"},{"location":"entities/#CAD_Sketcher.model.types.SlvsSketch","title":"<code>SlvsSketch</code>","text":"<p>A sketch groups 2 dimensional entities together and is used to later convert geometry to native blender types.</p> <p>Entities that belong to a sketch can only be edited as long as the sketch is active.</p> <p>Parameters:</p> Name Type Description Default <code>wp</code> <code>SlvsWorkplane</code> <p>The base workplane of the sketch</p> required"},{"location":"entities/#CAD_Sketcher.model.types.SlvsPoint2D","title":"<code>SlvsPoint2D</code>","text":"<p>Representation of a point in 2D space.</p> <p>Parameters:</p> Name Type Description Default <code>co</code> <code>FloatVectorProperty</code> <p>The coordinates of the point on the worpkplane in the form (U, V)</p> required <code>sketch</code> <code>SlvsSketch</code> <p>The sketch this entity belongs to</p> required"},{"location":"entities/#CAD_Sketcher.model.types.SlvsLine2D","title":"<code>SlvsLine2D</code>","text":"<p>Representation of a line in 2D space. Connects p1 and p2 and lies on the sketche's workplane.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>SlvsPoint2D</code> <p>Line's startpoint</p> required <code>p2</code> <code>SlvsPoint2D</code> <p>Line's endpoint</p> required <code>sketch</code> <code>SlvsSketch</code> <p>The sketch this entity belongs to</p> required"},{"location":"entities/#CAD_Sketcher.model.types.SlvsArc","title":"<code>SlvsArc</code>","text":"<p>Representation of an arc in 2D space around the centerpoint ct. Connects p2 to p3 or (vice-versa if the option invert_direction is true) with a circle segment that is resolution independent. The arc lies on the sketche's workplane.</p> <p>Parameters:</p> Name Type Description Default <code>p1</code> <code>SlvsPoint2D</code> <p>Arc's centerpoint</p> required <code>p2</code> <code>SlvsPoint2D</code> <p>Arc's startpoint</p> required <code>p2</code> <code>SlvsPoint2D</code> <p>Arc's endpoint</p> required <code>nm</code> <code>SlvsNormal3D</code> <p>Orientation</p> required <code>sketch</code> <code>SlvsSketch</code> <p>The sketch this entity belongs to</p> required"},{"location":"entities/#CAD_Sketcher.model.types.SlvsCircle","title":"<code>SlvsCircle</code>","text":"<p>Representation of a circle in 2D space. The circle is centered at ct with its size defined by the radius and is resoulution independent.</p> <p>Parameters:</p> Name Type Description Default <code>ct</code> <code>SlvsPoint2D</code> <p>Circle's centerpoint</p> required <code>radius</code> <code>FloatProperty</code> <p>The radius of the circle</p> required <code>nm</code> <code>SlvsNormal2D</code> required <code>sketch</code> <code>SlvsSketch</code> <p>The sketch this entity belongs to</p> required"},{"location":"getting_started/","title":"Getting started","text":"<p>This guide takes you through the first steps in order to get familiar with the addon.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Download the Latest Release of the addon and install it from the addons tab in blender's preferences. Get the solvespace module by pressing the install button in the addon's preferences. See here if you have trouble installing the addon.</p>"},{"location":"getting_started/#create-a-sketch","title":"Create a Sketch","text":"<p>In the 3d Viewport open the sidebar and change to the \"Sketcher\" tab. Press the button  \"Add Sketch\" and pick one of the origin planes that appears. The newly created sketch will then be activated and any geometry that is drawn will belong to it. The sketch can be exited and re-activated at any time by simply pressing the \"Leave Sketch\" button.</p>"},{"location":"getting_started/#add-some-geometry","title":"Add some Geometry","text":"<p>While a sketch is active switch to the \"Add Circle\" Workspacetool. Now hover the sketch's origin point, click it and move the mouse away, click again to confirm.</p>"},{"location":"getting_started/#add-constraints","title":"Add Constraints","text":"<p>Switch back to the Selection Tool, by pressing ESC. Make sure nothing is selected by pressing ESC again or by clicking into empty space while the selection tool is active. Now select the circle and click the button in the sidebar to add a diameter constraint.</p>"},{"location":"getting_started/#convert","title":"Convert","text":"<p>While the sketch is still active, select a convert method from the sidebar, then exit the sketch.</p>"},{"location":"getting_started/#edit-and-update","title":"Edit and Update","text":"<p>Re-activate the sketch from the sketch selector. Click the diameter constraint and enter a value. Switch to the rectangle tool and draw a rectangle around the circle.</p>"},{"location":"getting_started/#add-dimensions","title":"Add Dimensions","text":"<p>Now also give the rectangle exact dimensions by selecting a line and a point on the opposite side and clicking the distance button in the sidebar. Do that again for in the other direction.</p>"},{"location":"getting_started/#add-construction-geometry","title":"Add Construction Geometry","text":"<p>Note that the rectangle still hasn't a defined position. To fix that add a line between two edge points, mark it as construction and add a midpoint constraint between that line and the sketch origin.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#addon-installation","title":"Addon installation","text":"ZIP FileGit <ul> <li>Download the ZIP archive from github (ensure it's a ZIP Archive, on Mac you might have to repack as it gets unzipped automatically)</li> <li>Open Blender and go to: Edit &gt; Preferences &gt; Add-ons &gt; Press \"Install...\" button</li> <li>Browse to the location of the ZIP and select it, then press \"Install Add-on\"</li> <li>Enable the addon by pressing the checkbox</li> </ul> <p>You can get the latest state of the addon and easily update it with git</p> <ul> <li>Get Git</li> <li>In blender, set the scripts-path under Preferences-&gt;File Paths-&gt;Data-&gt;Scripts (e.g. ~/blender_scripts)</li> <li> <p>Open your scripts_folder</p> <pre><code>cd ~/blender_scripts\n</code></pre> </li> <li> <p>Create an addons folder     <pre><code>mkdir addons\ncd addons\n</code></pre></p> </li> <li>Clone the addon repository     <pre><code>git clone https://github.com/hlorus/CAD_Sketcher.git\n</code></pre></li> <li>Blender will now automatically load addons from that path</li> </ul>"},{"location":"installation/#dependency-installation","title":"Dependency installation","text":"<p>CAD Sketcher heavily depends on the solvespace python module and won't be functional without it.</p> <p>Once the 3D View CAD Sketcher plugin is installed check its preferences for the \"Solver Module\" tab to see if the module is already available, otherwise follow one of the guides below.</p> Install from PIPInstall from local file <ul> <li>Press \"Install from PIP\"</li> <li>Wait for the process to finish</li> </ul> <ul> <li>Download the appropriate *.whl file here (make sure the python version matches the one from your blender installation)</li> <li>Choose the file in the filepath selector</li> <li>Press \"Install from local File\"</li> </ul>"},{"location":"installation/#installation-fails","title":"Installation fails","text":"<p>There are multiple reasons why the installation might fail. Try the following:</p> <ul> <li>If you're on windows start blender as administrator when installing the dependency</li> <li>If you've installed blender through a package manager try again with a version from blender.org</li> <li>Check the application's output in the system console for any warnings or hints to find out why it's failing</li> <li>Blender can be installed through package managers, installing external python packages with such installations might not be possible. Try to use the addon with Blender installed from the official website.</li> <li>Ask for help</li> </ul>"},{"location":"installation/#updating","title":"Updating","text":"ManualGit <ul> <li>Simply redo the installation steps with the latest addon version</li> <li>Delete the old version from the addons list under Edit &gt; Preferences &gt; Add-ons</li> </ul> <p>If you've cloned the addon with git you can easily update it:</p> <ul> <li>Open the addon folder in a terminal     <pre><code>cd ~/BLENDER_SCRIPTS_PATH/CAD_Sketcher\n</code></pre></li> <li>Pull the changes     <pre><code>git pull\n</code></pre></li> </ul>"},{"location":"integration/","title":"Integration","text":"<p>The geometry that is used in the addon isn't native blender geometry, that means blender doesn't know anything about it and native tools cannot work with it. So in order to further process drawn shapes they have to be converted to a native type first.</p> <p>INFO: There are some limitations to keep in mind when converting.</p>"},{"location":"integration/#convert-types","title":"Convert Types","text":"<p>When a sketch is active you can choose the convert type for it in the sidebar. By default this is set to None which means no native geometry will be created.</p> <p>INFO: Setting this to something other than None will disable the visibility of the sketch so that it will only show when it's active</p>"},{"location":"integration/#bezier-converter","title":"Bezier Converter","text":"<p>Converts the sketch to a bezier curve.</p>"},{"location":"integration/#mesh-converter","title":"Mesh Converter","text":"<p>Converts the sketch to a mesh. This doesn't convert to mesh directly but rather uses the bezier converter and the native to_mesh() function behind the scene.</p>"},{"location":"integration/#fill-shape","title":"Fill Shape","text":"<p>Some converters support the Fill Shape setting. When this isn't set the resulting geometry won't have surfaces at all but rather just edges.</p> <p>INFO: The setting toggles the bezier's fill_mode option between None and Front</p>"},{"location":"integration/#limitations","title":"Limitations","text":""},{"location":"integration/#3d-geometry","title":"3D Geometry","text":"<p>Conversion requires a sketch, the addon currently doesn't support creating 3D sketches and is therefor limited to the conversion of 2D entities.</p>"},{"location":"integration/#non-persistent-geometry","title":"Non-Persistent Geometry","text":"<p>The output geometry will be re-generated each time a sketch is deactivated. Converters don't take any modifications that are done after the conversion into account.</p> <p>INFO: Indices of created geometry elements aren't persistent. Referencing such elements isn't currently supported.</p> <p>In order to further process geometry after the conversion make sure you do this in a procedural way, otherwise things might break when editing the sketch.</p>"},{"location":"integration/#path-connections","title":"Path Connections","text":"<p>Converters parse the geometry depending on shared start-/endpoints, connections created with coincident constraints or overlaps between entities aren't interpreted as a connection.</p>"},{"location":"integration/#precision","title":"Precision","text":"<p>Bezier curves cannot exactly represent a circle. Converted curves are only an approximation to an exact arc or circle. Converted meshes also suffer from that error since the mesh convert type is currently based on the bezier converter.</p>"},{"location":"integration/#best-practices","title":"Best Practices","text":"<p>To avoid running into such limitations try to follow these practices:</p> <ul> <li>Connect entities by sharing a start-/endpoint, avoid using the coincident constraint to connect entities that are part of a path that you intend to later convert.</li> <li>Use the construction option whenever you create geometry that you don't intend to convert.</li> <li>If you have alot of construction geometry create a dedicated sketch that is used for construction only. Then create another sketch on the same workplane and reference entities from the construction sketch.</li> <li>If the Fill Shape option is set make sure the drawn shape is a closed path and that multiple closed paths don't overlap each other.</li> </ul>"},{"location":"interaction_system/","title":"Interaction system","text":"<p>The focus of the addon lies on different aspects than blender itself. Addon tools usually work on one specific entity or between a few entities where the order of selection matters. As the existing system of selection isn't ideal in this context the addon defines a generic interaction system which allows for a powerful and flexible workflow.</p>"},{"location":"interaction_system/#stateful-operations","title":"Stateful Operations","text":"<p>Most tools in the addon are implemented as stateful tools. In this context a state represents one target like a selection or a value. When running a tool you will iterate through these states until all states have valid input.</p> <p>Let's take the \"Add Circle\" tool as an example. Since a circle is represented by its center and radius the tool will have two states. One to define the center element and one to set the radius.</p>"},{"location":"interaction_system/#state-types","title":"State Types","text":"<p>A state can have two different kind of targets:</p> <ul> <li>Pointer</li> </ul> <p>A pointer target is best described as a selection. Pointer states will prompt the user to select an element of the according type.</p> <ul> <li>Property</li> </ul> <p>A property target simply represents a value of some kind like an integer or a float  or a set of values to represent something like a location.</p> <p> A state can however define both of those targets. In that case the property will be used to create a new element to satisfy the pointer target. This is often used to be able to place a new point at the mouse location when nothing is hovered but pick an existing point if one is hovered.</p>"},{"location":"interaction_system/#selection-vs-action","title":"Selection vs Action","text":"<p>To be as flexible as possible the interaction system allows to work in different paradigms which can also be freely mixed. Those are:</p> <ul> <li> <p>Select -&gt; Invoke Operation   (The standard way to work in blender) </p> </li> <li> <p>Invoke Operation -&gt; Select </p> </li> <li> <p>Partial Select -&gt; Invoke Operation -&gt; Select rest (Or set Parameters) </p> </li> </ul>"},{"location":"interaction_system/#numerical-edit","title":"Numerical Edit","text":"<p>In order to precisely edit a states property, it's possible to edit values directly by entering numbers. When the stateproperty is a set of multiple values (e.g. XYZ Location) they will be treated as sub-states, meaning you can iterate (TAB) through them and enter values sequentially.</p>"},{"location":"interaction_system/#description","title":"Description","text":"<p>When learning how a new tool works it's best to take a look at its tooltip, this will list the different states of the tool. For pointer states this will additionally display the accepted types that can be picked.</p> <p></p> <p></p> <p>While running an operation the statusbar will display that information for the currently active state.</p> <p></p>"},{"location":"interaction_system/#immediate-execution","title":"Immediate Execution","text":"<p>Most tools support immediate execution which will invoke the tools operations when switching to it and a valid selection is given.</p> <p>Note that the execution is only triggered when a tool is invoked by its shortcut.</p> <p></p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#CAD_Sketcher.model.types.SketcherProps","title":"<code>SketcherProps</code>","text":"<p>The base structure for CAD Sketcher</p>"},{"location":"reference/#CAD_Sketcher.model.types.SlvsEntities","title":"<code>SlvsEntities</code>","text":"<p>Holds all Solvespace Entities</p>"},{"location":"reference/#CAD_Sketcher.model.types.SlvsConstraints","title":"<code>SlvsConstraints</code>","text":""},{"location":"solver/","title":"Solver","text":"<p>The addon utilizes the solver from solvespace which takes a set of entities with an initial position and a set of constraints which describe geometric relationships between entities. When the solver runs it will try to adjust entity locations to satisfy the constraints.</p>"},{"location":"solver/#failure","title":"Failure","text":"<p>It's common that the solver fails to find a solution to satisfy all constraints. There are multiple reasons why the solver might fail. Whenever this happens the active sketch will be marked in the sidebar. It will have one of the following states:</p> <ul> <li>Okay</li> <li>Inconsistent</li> <li>Didnt Converge</li> <li>Too Many Unknowns</li> <li>Unknown Failure</li> </ul>"},{"location":"tools/","title":"Tools","text":"<p>Tools in CAD Sketcher are either exposed as a workspacetool or as an operator. Note however that either of those use the same interaction system.</p>"},{"location":"tools/#generic-tools","title":"Generic Tools","text":""},{"location":"tools/#CAD_Sketcher.operators.add_sketch.View3D_OT_slvs_add_sketch","title":"<code>View3D_OT_slvs_add_sketch</code>","text":"<p>Add a sketch</p>"},{"location":"tools/#CAD_Sketcher.operators.delete_entity.View3D_OT_slvs_delete_entity","title":"<code>View3D_OT_slvs_delete_entity</code>","text":"<p>Delete Entity by index or based on the selection if index isn't provided</p>"},{"location":"tools/#CAD_Sketcher.operators.delete_constraint.View3D_OT_slvs_delete_constraint","title":"<code>View3D_OT_slvs_delete_constraint</code>","text":"<p>Delete constraint by type and index</p>"},{"location":"tools/#workspacetools","title":"Workspacetools","text":"<p>Workspacetools are used to interactively create entities. You can access them from the viewport's \"T\"-panel. Check the tools section to get familiar with the behavior of BGS tools.</p> <p>INFO: Interaction with addon geometry is only possible when one of the addon tools is active.</p>"},{"location":"tools/#workspacetool-access-keymap","title":"Workspacetool Access Keymap","text":"<p>Whenever one of the addon's tools is active the tool access keymap allows to quickly switch between the different tools.</p> Key Modifier Action ESC - Activate Tool: Select P - Invoke Tool: Add Point 2D L - Invoke Tool: Add Line 2D C - Invoke Tool: Add Circle A - Invoke Tool: Add Arc R - Invoke Tool: Add Rectangle S - Invoke Tool: Add Sketch Y - Invoke Tool: Trim <p>Dimensional Constraints:</p> Key Modifier Action D Alt Distance V Alt Vertical Distance H Alt Horizontal Distance A Alt Angle O Alt Diameter R Alt Radius <p>Geometric Constraints:</p> Key Modifier Action C Shift Coincident V Shift Vertical H Shift Horizontal E Shift Equal P Shift Parallel N Shift Perpendicular T Shift Tangent M Shift Midpoint R Shift Ratio"},{"location":"tools/#basic-tool-keymap","title":"Basic Tool Keymap","text":"<p>The basic tool interaction is consistent between tools.</p> Key Modifier Action Tab - Jump to next tool state or property substate when in numerical edit 0-9 / (-) - Activate numeric edit Enter / Lmb - Verify the operation Esc / Rmb - Cancel the operation <p>While numeric edit is active</p> Key Modifier Action Tab - Jump to next tool property substate 0-9 - Activate numeric edit Minus(-) - Toggle between positive and negative values"},{"location":"tools/#selection-tools","title":"Selection tools","text":"<p>Keymap:</p> Key Modifier Action LMB - Toggle Select ESC - Deselect All I Ctrl Inverse selection E Ctrl Extend selection in chain E Ctrl+Shift Select full chain <p>INFO: LMB in empty space will also deselect all.</p> <p>INFO: Chain selection works with coincident constraints too</p>"},{"location":"tools/#CAD_Sketcher.operators.select.View3D_OT_slvs_select","title":"<code>View3D_OT_slvs_select</code>","text":"<p>Select an entity</p> <p>Either the entity specified by the index property or the hovered index if the index property is not set</p>"},{"location":"tools/#CAD_Sketcher.operators.select.View3D_OT_slvs_select_all","title":"<code>View3D_OT_slvs_select_all</code>","text":"<p>Select / Deselect all entities</p>"},{"location":"tools/#CAD_Sketcher.operators.select.View3D_OT_slvs_select_invert","title":"<code>View3D_OT_slvs_select_invert</code>","text":"<p>Invert entities selection</p>"},{"location":"tools/#CAD_Sketcher.operators.select.View3D_OT_slvs_select_extend","title":"<code>View3D_OT_slvs_select_extend</code>","text":"<p>Select neighbour entities</p>"},{"location":"tools/#CAD_Sketcher.operators.select.View3D_OT_slvs_select_extend_all","title":"<code>View3D_OT_slvs_select_extend_all</code>","text":"<p>Select neighbour entities</p>"},{"location":"tools/#CAD_Sketcher.operators.add_point_3d.View3D_OT_slvs_add_point3d","title":"<code>View3D_OT_slvs_add_point3d</code>","text":"<p>Add a point in 3d space</p>"},{"location":"tools/#CAD_Sketcher.operators.add_line_3d.View3D_OT_slvs_add_line3d","title":"<code>View3D_OT_slvs_add_line3d</code>","text":"<p>Add a line in 3d space</p>"},{"location":"tools/#CAD_Sketcher.operators.add_point_2d.View3D_OT_slvs_add_point2d","title":"<code>View3D_OT_slvs_add_point2d</code>","text":"<p>Add a point to the active sketch</p>"},{"location":"tools/#CAD_Sketcher.operators.add_line_2d.View3D_OT_slvs_add_line2d","title":"<code>View3D_OT_slvs_add_line2d</code>","text":"<p>Add a line to the active sketch</p>"},{"location":"tools/#CAD_Sketcher.operators.add_circle.View3D_OT_slvs_add_circle2d","title":"<code>View3D_OT_slvs_add_circle2d</code>","text":"<p>Add a circle to the active sketch</p>"},{"location":"tools/#CAD_Sketcher.operators.add_arc.View3D_OT_slvs_add_arc2d","title":"<code>View3D_OT_slvs_add_arc2d</code>","text":"<p>Add an arc to the active sketch</p>"},{"location":"tools/#CAD_Sketcher.operators.add_rectangle.View3D_OT_slvs_add_rectangle","title":"<code>View3D_OT_slvs_add_rectangle</code>","text":"<p>Add a rectangle to the active sketch</p>"},{"location":"tools/#CAD_Sketcher.operators.add_workplane.View3D_OT_slvs_add_workplane","title":"<code>View3D_OT_slvs_add_workplane</code>","text":"<p>Add a workplane</p>"},{"location":"tools/#CAD_Sketcher.operators.add_workplane.View3D_OT_slvs_add_workplane_face","title":"<code>View3D_OT_slvs_add_workplane_face</code>","text":"<p>Add a statically placed workplane, orientation and location is copied from selected mesh face</p>"},{"location":"tools/#CAD_Sketcher.operators.trim.View3D_OT_slvs_trim","title":"<code>View3D_OT_slvs_trim</code>","text":"<p>Trim segment to its closest intersections</p>"},{"location":"user_interface/","title":"User interface","text":""},{"location":"user_interface/#sidebar","title":"Sidebar","text":"<p>The addon adds a some panels to the \"N\"-sidebar under the category \"Sketcher\". From here you can set the active sketch, access its properties, add constraints and interact with elements via the browsers.</p>"},{"location":"user_interface/#sketch-selector","title":"Sketch Selector","text":"<p>Whenever no sketch is active the sidebar will list all available sketches. From there you can toggle the visibility of the sketches or set one as active. The UI will change when a sketch is active, showing a big blue button which lets you exit the sketch as well as some properties of that sketch.</p>"},{"location":"user_interface/#entity-browser","title":"Entity Browser","text":"<p>Lists all currently active entities. Allows selection by clicking on the name.</p>"},{"location":"user_interface/#constraint-browser","title":"Constraint Browser","text":"<p>Lists all currently active constraints. Shows the failure state on the left and allows to invoke the constraint's context menu.</p>"},{"location":"user_interface/#gizmos","title":"Gizmos","text":"<p>Gizmos are used to display constraints. There are specific gizmo types for the three dimensional constraints, angle, distance and diameter.</p> <p>To interact with the settings of a constraint click its gizmo to open a menu.  </p> <p>The rest of the constraints use a generic gizmo that is displayed next to the entities they depend on. Clicking such a gizmo either shows the constraint's settings or directly deletes the constraint if it has no settings to show.</p>"},{"location":"user_interface/#context-menu","title":"Context Menu","text":"<p>The context menu can be used to access properties and actions of an element, either by hovering an entity and pressing the right mouse button, by clicking a constraint gizmo that supports it or through the corresponding button in one of the element browsers.</p> <p>INFO: Only the hovered entity is used, the context menu ignores the selection.</p>"},{"location":"user_interface/#preferences","title":"Preferences","text":"<p>Access the preferences by expanding the enabled addon under Edit &gt; Preferences &gt; Add-ons &gt; CAD Sketcher.</p> <p> </p>"},{"location":"user_interface/#solver-module","title":"Solver Module","text":"<p>Shows either the path to the registered solver module or options to install it.</p>"},{"location":"user_interface/#general","title":"General","text":"<ul> <li>By enabling \"Show Debug Settings\" some experimental features are enabled, use with caution.</li> <li>Choose the logging settings</li> </ul>"},{"location":"user_interface/#theme","title":"Theme","text":"<p>Colors that are used in the addon are defined under the theme section. The addon also supports theme presets. You can get the presets path by entering the following line into blenders python console:</p> <pre><code>bpy.utils.user_resource(\"SCRIPTS\")\n</code></pre>"}]}